import { FormatSettings } from './FormatSettings';
import { TileData } from './TileData';
import { State, TileShape, Direction, ContentFormatType, IconPlacement } from './enums';
import { Shape } from "./shapes";
import { BaseType } from 'd3';
import { TilesCollection } from './TilesCollection';
import { Handle } from './interfaces';
import { UniversalTileData } from './UniversalTileData';
export declare class Tile {
    collection: TilesCollection;
    i: number;
    tilesData: TileData[];
    univeralTileData: UniversalTileData;
    formatSettings: FormatSettings;
    constructor(collection: TilesCollection, i: number, tilesData: TileData[], formatSettings: FormatSettings);
    get tilesInRow(): number;
    get rowNumber(): number;
    get indexInRow(): number;
    get rowStartingIndex(): number;
    get text(): string;
    get rowText(): string[];
    get textColor(): string;
    get textOpacity(): number;
    get fontSize(): number;
    get fontFamily(): string;
    get textAlign(): string;
    get textMarginLeft(): number;
    get textMarginRight(): number;
    get totalHorizontalTextMargin(): number;
    get textBmargin(): number;
    get text2Color(): string;
    get text2Opacity(): number;
    get font2Size(): number;
    get font2Family(): string;
    get text2Align(): string;
    get tex2tMarginLeft(): number;
    get text2MarginRight(): number;
    get allTextWidth(): number;
    get widthSpaceForText(): number;
    get widthSpaceForAllText(): number;
    get inlineTextWidth(): number;
    get boundedTextWidth(): number;
    get boundedTextHeight(): number;
    get maxBoundedTextHeight(): number;
    get beforeInRowText(): string[];
    get beforeInRowTextWidth(): number;
    get textContainerWidthType(): string;
    get textContainerHeight(): number;
    get contentContainerWidth(): number;
    get widthTakenByIcon(): number;
    get maxInlineTextWidth(): number;
    get text2(): string;
    get tileFill(): string;
    get tileFillOpacity(): number;
    get tileStroke(): string;
    get tileStrokeWidth(): number;
    get tilePadding(): number;
    get tileHPadding(): number;
    get totalTileHPadding(): number;
    get tileVPadding(): number;
    get totalTileVPadding(): number;
    get tileWidth(): number;
    get dynamicExtraWidthPerTile(): number;
    get tileHeight(): number;
    get tileXpos(): number;
    get tileYpos(): number;
    get tileShape(): TileShape;
    get shape(): Shape;
    get shapePath(): string;
    get shapeStrokePath(): string;
    get handles(): Handle[];
    get alterHorizontalPadding(): number;
    get alterVerticalPadding(): number;
    get shapeExtraHSpace(): number;
    get shapeExtraVSpace(): number;
    get contentBoundingBoxHeight(): number;
    get contentBoundingBoxWidth(): number;
    get contentBoundingBoxXPos(): number;
    get contentBoundingBoxYPos(): number;
    get shapeRoundedCornerRadius(): number;
    get shadowColor(): string;
    get shadowTransparency(): number;
    get shadowDistance(): number;
    get shadowStrength(): number;
    get shadowDirection(): Direction;
    get shadowDirectionCoords(): {
        x: number;
        y: number;
    };
    get glowColor(): string;
    get glowTransparency(): number;
    get glowStrength(): number;
    get iconURL(): string;
    get iconWidth(): number;
    get iconHmargin(): number;
    get iconTopMargin(): number;
    get iconBottomMargin(): number;
    get spaceForIcon(): number;
    get iconPlacement(): IconPlacement;
    get iconHeight(): number;
    get iconOpacity(): number;
    get bgImgURL(): string;
    getBgImgDims(box: DOMRect): {
        width: number;
        height: number;
    };
    get tileData(): TileData;
    get isSelected(): boolean;
    get isHovered(): boolean;
    get isDisabled(): boolean;
    get currentState(): State;
    get textElement(): HTMLSpanElement;
    get textElementByIcon(): HTMLSpanElement;
    get textContainer(): HTMLDivElement;
    get textByIconContainer(): HTMLDivElement;
    get icon(): HTMLDivElement;
    get contentTextText2(): HTMLDivElement;
    get contentTextIconFormat(): HTMLDivElement;
    get contentTextFormat(): HTMLDivElement;
    get content(): HTMLDivElement;
    get contentFormatType(): ContentFormatType;
    get inHorizontalWindow(): boolean;
    get inVerticalWindow(): boolean;
    get inViewWindow(): boolean;
    onTileMouseover(d?: Tile, i?: number, n?: BaseType[] | ArrayLike<BaseType>): void;
    onTileMouseout(d?: Tile, i?: number, n?: BaseType[] | ArrayLike<BaseType>): void;
    onTileClick(d?: Tile, i?: number, n?: BaseType[] | ArrayLike<BaseType>): void;
}
