import { FormatSettings, TextSettings, ContentAlignmentSettings, LayoutSettings, TileSettings, EffectSettings, IconSettings } from './FormatSettings';
import { TileData } from './TileData';
import { State, HorizontalAlignmentType, TileShape, Direction, ContentFormatType, IconPlacement, VerticalAlignmentType, GradientDirection } from './enums';
import { Shape } from "./shapes";
import { BaseType } from 'd3';
import { TilesCollection } from './TilesCollection';
import { Handle } from './interfaces';
import { UniversalTileData } from './UniversalTileData';
export declare class Tile {
    collection: TilesCollection;
    i: number;
    tilesData: TileData[];
    universalTileData: UniversalTileData;
    formatSettings: FormatSettings;
    constructor(collection: TilesCollection, i: number, tilesData: TileData[], formatSettings: FormatSettings);
    get tilesInRow(): number;
    get rowNumber(): number;
    get indexInRow(): number;
    get rowStartingIndex(): number;
    get text(): string;
    get rowText(): string[];
    get textSettings(): TextSettings;
    get textColor(): string;
    get textOpacity(): number;
    get fontSize(): number;
    get fontFamily(): string;
    get contentAlignmentSettings(): ContentAlignmentSettings;
    get contentHorizontalAlignment(): HorizontalAlignmentType;
    get contentVerticalAlignment(): VerticalAlignmentType;
    get contentMarginLeft(): number;
    get contentMarginRight(): number;
    get contentMarginTop(): number;
    get contentMarginBottom(): number;
    get totalContentHorizontalMargin(): number;
    get totalContentVerticalMargin(): number;
    get text2Color(): string;
    get text2Opacity(): number;
    get font2Size(): number;
    get font2Family(): string;
    get allTextWidth(): number;
    get widthSpaceForText(): number;
    get widthSpaceForAllText(): number;
    get inlineTextWidth(): number;
    get boundedTextWidth(): number;
    get maxIndividualBoundedTextHeight(): number;
    get maxFontSize(): number;
    get maxBoundedTextHeight(): number;
    get beforeInRowText(): string[];
    get beforeInRowTextWidth(): number;
    get textContainerWidthType(): string;
    get textContainerHeight(): number;
    get contentContainerWidth(): number;
    get text2(): string;
    get tileSettings(): TileSettings;
    get tileFill(): string;
    get tileFillOpacity(): number;
    get tileStroke(): string;
    get tileStrokeWidth(): number;
    get tileHasGradient(): boolean;
    get gradientColor(): string;
    get gradientDirection(): GradientDirection;
    get gradientCoordinates(): {
        x1: number;
        x2: number;
        y1: number;
        y2: number;
    };
    get reversGradientColors(): boolean;
    get layoutSettings(): LayoutSettings;
    get tilePadding(): number;
    get tileHPadding(): number;
    get totalTileHPadding(): number;
    get tileVPadding(): number;
    get totalTileVPadding(): number;
    get tileWidth(): number;
    get dynamicExtraWidthPerTile(): number;
    get tileHeight(): number;
    get tileXpos(): number;
    get tileYpos(): number;
    get tileShape(): TileShape;
    get shape(): Shape;
    get shapePath(): string;
    get shapeStrokePath(): string;
    get handles(): Handle[];
    get alterHorizontalPadding(): number;
    get alterVerticalPadding(): number;
    get shapeExtraHSpace(): number;
    get shapeExtraVSpace(): number;
    get contentBoundingBoxHeight(): number;
    get contentBoundingBoxWidth(): number;
    get contentBoundingBoxXPos(): number;
    get contentBoundingBoxYPos(): number;
    get effectSettings(): EffectSettings;
    get shapeRoundedCornerRadius(): number;
    get shadowColor(): string;
    get shadowTransparency(): number;
    get shadowDistance(): number;
    get shadowStrength(): number;
    get shadowDirection(): Direction;
    get shadowDirectionCoords(): {
        x: number;
        y: number;
    };
    get glowColor(): string;
    get glowTransparency(): number;
    get glowStrength(): number;
    get lightingStrength(): number;
    get iconURL(): string;
    get iconSettings(): IconSettings;
    get iconWidth(): number;
    get iconPlacement(): IconPlacement;
    get iconVerticalMaxHeight(): number;
    get iconHorizontalMaxHeight(): number;
    get iconOpacity(): number;
    get iconTextPadding(): number;
    get bgImgURL(): string;
    getBgImgDims(aspectRatio: number): {
        width: number;
        height: number;
    };
    get tileData(): TileData;
    get isSelected(): boolean;
    get isHovered(): boolean;
    get isDisabled(): boolean;
    get currentState(): State;
    get maxHorizontalTextSpace(): number;
    get textElement(): HTMLSpanElement;
    get textContainer(): HTMLDivElement;
    get icon(): HTMLImageElement;
    setTextContainerAlignments(textContainer: HTMLDivElement): HTMLDivElement;
    get textContent(): HTMLDivElement;
    get iconContent(): HTMLDivElement;
    get textIconContent(): HTMLDivElement;
    get content(): HTMLDivElement;
    get contentContainer(): HTMLDivElement;
    get contentFormatType(): ContentFormatType;
    get inHorizontalWindow(): boolean;
    get inVerticalWindow(): boolean;
    get inViewWindow(): boolean;
    onTileMouseover(d?: Tile, i?: number, n?: BaseType[] | ArrayLike<BaseType>): void;
    onTileMouseout(d?: Tile, i?: number, n?: BaseType[] | ArrayLike<BaseType>): void;
    onTileClick(d?: Tile, i?: number, n?: BaseType[] | ArrayLike<BaseType>): void;
}
